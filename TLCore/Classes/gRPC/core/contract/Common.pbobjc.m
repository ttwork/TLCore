// Generated by the protocol buffer compiler.  DO NOT EDIT!
// clang-format off
// source: core/contract/common.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
#define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
#import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
#import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CommonRoot

@implementation CommonRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - Enum ResourceCode

GPBEnumDescriptor *ResourceCode_EnumDescriptor(void) {
    static _Atomic(GPBEnumDescriptor*) descriptor = nil;
    if (!descriptor) {
        GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
        static const char *valueNames =
        "Bandwidth\000Energy\000TronPower\000";
        static const int32_t values[] = {
            ResourceCode_Bandwidth,
            ResourceCode_Energy,
            ResourceCode_TronPower,
        };
        GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ResourceCode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ResourceCode_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None];
        GPBEnumDescriptor *expected = nil;
        if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
            [worker release];
        }
    }
    return descriptor;
}

BOOL ResourceCode_IsValidValue(int32_t value__) {
    switch (value__) {
        case ResourceCode_Bandwidth:
        case ResourceCode_Energy:
        case ResourceCode_TronPower:
            return YES;
        default:
            return NO;
    }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
