// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api/zksnark.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Zksnark.pbobjc.h"
#import "Tron.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ZksnarkRoot

@implementation ZksnarkRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ZksnarkRoot_FileDescriptor

static GPBFileDescriptor *ZksnarkRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"protocol"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ZksnarkRequest

@implementation ZksnarkRequest

@dynamic hasTransaction, transaction;
@dynamic sighash;
@dynamic valueBalance;
@dynamic txId;

typedef struct ZksnarkRequest__storage_ {
  uint32_t _has_storage_[1];
  TronTransaction *transaction;
  NSData *sighash;
  NSString *txId;
  int64_t valueBalance;
} ZksnarkRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transaction",
        .dataTypeSpecific.className = GPBStringifySymbol(TronTransaction),
        .number = ZksnarkRequest_FieldNumber_Transaction,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZksnarkRequest__storage_, transaction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sighash",
        .dataTypeSpecific.className = NULL,
        .number = ZksnarkRequest_FieldNumber_Sighash,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ZksnarkRequest__storage_, sighash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "valueBalance",
        .dataTypeSpecific.className = NULL,
        .number = ZksnarkRequest_FieldNumber_ValueBalance,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ZksnarkRequest__storage_, valueBalance),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "txId",
        .dataTypeSpecific.className = NULL,
        .number = ZksnarkRequest_FieldNumber_TxId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ZksnarkRequest__storage_, txId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZksnarkRequest class]
                                     rootClass:[ZksnarkRoot class]
                                          file:ZksnarkRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZksnarkRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\014\000\004\004\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ZksnarkResponse

@implementation ZksnarkResponse

@dynamic code;

typedef struct ZksnarkResponse__storage_ {
  uint32_t _has_storage_[1];
  ZksnarkResponse_Code code;
} ZksnarkResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.enumDescFunc = ZksnarkResponse_Code_EnumDescriptor,
        .number = ZksnarkResponse_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ZksnarkResponse__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ZksnarkResponse class]
                                     rootClass:[ZksnarkRoot class]
                                          file:ZksnarkRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ZksnarkResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ZksnarkResponse_Code_RawValue(ZksnarkResponse *message) {
  GPBDescriptor *descriptor = [ZksnarkResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ZksnarkResponse_FieldNumber_Code];
  return GPBGetMessageInt32Field(message, field);
}

void SetZksnarkResponse_Code_RawValue(ZksnarkResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [ZksnarkResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ZksnarkResponse_FieldNumber_Code];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum ZksnarkResponse_Code

GPBEnumDescriptor *ZksnarkResponse_Code_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Success\000Failed\000";
    static const int32_t values[] = {
        ZksnarkResponse_Code_Success,
        ZksnarkResponse_Code_Failed,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ZksnarkResponse_Code)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ZksnarkResponse_Code_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ZksnarkResponse_Code_IsValidValue(int32_t value__) {
  switch (value__) {
    case ZksnarkResponse_Code_Success:
    case ZksnarkResponse_Code_Failed:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
